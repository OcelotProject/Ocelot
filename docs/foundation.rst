Core elements
*************

Ocelot workflow
===============

Running Ocelot usually involves the following steps:

* Get the path of an undefined database in ecospold2 format on your local computer.
* Decide on a system model configuration to transform the undefined datasets to a linked database. This configuration could be a list of Python functions, or could be the default Ocelot system model.
* Call the ``system_model`` function, either directly or through the command line application. ``system_model`` takes the directory path from step one and the configuration from step two as inputs.
* Look through the HTML report generated by the system model function, and either accept the given linked database, or make changes in your configuration definitions or transformation functions.

.. _configuration:

Configuration & ``system_model``
================================

An Ocelot configuration is just a list of transformation functions which, when applied in order, produce a realization of a linked database. Configurations are currently specified in Python code, but in the future will also be able to be defined in other formats such as Excel.

Running Ocelot without specifying a configuration will use the default configuration, which is the cutoff system model.

A typical system model may have many transformation functions, as each function should do exactly one specific change. To make configurations more readable, you can use a ``Collection`` object to group transformation functions that are commonly used together, or that form one unit of work.

.. autoclass:: ocelot.Collection

The ``system_model`` function is actually quite simple:

.. _systemmodel:

.. automethod:: ocelot.model.system_model

Transformation functions
========================

Transform functions are the heart of Ocelot - each one performs one distinct change to the collection of datasets. Transform functions can be any callable, bit are mostly commonly functions.

The report generator will use information about each transform function when creating the report. Specifically, the report generator will look at the function name, its `docstring <https://www.python.org/dev/peps/pep-0257/>`__ (a text description of what the function does, included in the function code), and a new attribute ``__table__``.

If you need to initialize functions using `functools.partial <https://docs.python.org/3.5/library/functools.html#functools.partial>`__, the report generator will still get the correct function metadata. Other forms of currying are not supported.

If it is more convenient to provide logging data in tabular form in the Ocelot model run report, then define the attribute ``__table__`` as follows:

.. code-block:: python

    def foo(data):
        return data

    foo.__table__ = {
        'title': 'Name of title to put in report',
        'columns': ["names", "of", "columns"]
    }

.. _report:

Reports
=======

.. autoclass:: ocelot.Report

.. autoclass:: ocelot.HTMLReport
